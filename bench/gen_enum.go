// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package bench

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// GenEnumTypeT0 is a GenEnumType of type T0.
	GenEnumTypeT0 GenEnumType = iota
	// GenEnumTypeT1 is a GenEnumType of type T1.
	GenEnumTypeT1
	// GenEnumTypeT2 is a GenEnumType of type T2.
	GenEnumTypeT2
	// GenEnumTypeT3 is a GenEnumType of type T3.
	GenEnumTypeT3
	// GenEnumTypeT4 is a GenEnumType of type T4.
	GenEnumTypeT4
	// GenEnumTypeT5 is a GenEnumType of type T5.
	GenEnumTypeT5
	// GenEnumTypeT6 is a GenEnumType of type T6.
	GenEnumTypeT6
	// GenEnumTypeT7 is a GenEnumType of type T7.
	GenEnumTypeT7
	// GenEnumTypeT8 is a GenEnumType of type T8.
	GenEnumTypeT8
	// GenEnumTypeT9 is a GenEnumType of type T9.
	GenEnumTypeT9
)

var ErrInvalidGenEnumType = errors.New("not a valid GenEnumType")

const _GenEnumTypeName = "t0t1t2t3t4t5t6t7t8t9"

var _GenEnumTypeMap = map[GenEnumType]string{
	GenEnumTypeT0: _GenEnumTypeName[0:2],
	GenEnumTypeT1: _GenEnumTypeName[2:4],
	GenEnumTypeT2: _GenEnumTypeName[4:6],
	GenEnumTypeT3: _GenEnumTypeName[6:8],
	GenEnumTypeT4: _GenEnumTypeName[8:10],
	GenEnumTypeT5: _GenEnumTypeName[10:12],
	GenEnumTypeT6: _GenEnumTypeName[12:14],
	GenEnumTypeT7: _GenEnumTypeName[14:16],
	GenEnumTypeT8: _GenEnumTypeName[16:18],
	GenEnumTypeT9: _GenEnumTypeName[18:20],
}

// String implements the Stringer interface.
func (x GenEnumType) String() string {
	if str, ok := _GenEnumTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("GenEnumType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x GenEnumType) IsValid() bool {
	_, ok := _GenEnumTypeMap[x]
	return ok
}

var _GenEnumTypeValue = map[string]GenEnumType{
	_GenEnumTypeName[0:2]:   GenEnumTypeT0,
	_GenEnumTypeName[2:4]:   GenEnumTypeT1,
	_GenEnumTypeName[4:6]:   GenEnumTypeT2,
	_GenEnumTypeName[6:8]:   GenEnumTypeT3,
	_GenEnumTypeName[8:10]:  GenEnumTypeT4,
	_GenEnumTypeName[10:12]: GenEnumTypeT5,
	_GenEnumTypeName[12:14]: GenEnumTypeT6,
	_GenEnumTypeName[14:16]: GenEnumTypeT7,
	_GenEnumTypeName[16:18]: GenEnumTypeT8,
	_GenEnumTypeName[18:20]: GenEnumTypeT9,
}

// ParseGenEnumType attempts to convert a string to a GenEnumType.
func ParseGenEnumType(name string) (GenEnumType, error) {
	if x, ok := _GenEnumTypeValue[name]; ok {
		return x, nil
	}
	return GenEnumType(0), fmt.Errorf("%s is %w", name, ErrInvalidGenEnumType)
}

// MarshalText implements the text marshaller method.
func (x GenEnumType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *GenEnumType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseGenEnumType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errGenEnumTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *GenEnumType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = GenEnumType(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = GenEnumType(v)
	case string:
		*x, err = ParseGenEnumType(v)
	case []byte:
		*x, err = ParseGenEnumType(string(v))
	case GenEnumType:
		*x = v
	case int:
		*x = GenEnumType(v)
	case *GenEnumType:
		if v == nil {
			return errGenEnumTypeNilPtr
		}
		*x = *v
	case uint:
		*x = GenEnumType(v)
	case uint64:
		*x = GenEnumType(v)
	case *int:
		if v == nil {
			return errGenEnumTypeNilPtr
		}
		*x = GenEnumType(*v)
	case *int64:
		if v == nil {
			return errGenEnumTypeNilPtr
		}
		*x = GenEnumType(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = GenEnumType(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errGenEnumTypeNilPtr
		}
		*x = GenEnumType(*v)
	case *uint:
		if v == nil {
			return errGenEnumTypeNilPtr
		}
		*x = GenEnumType(*v)
	case *uint64:
		if v == nil {
			return errGenEnumTypeNilPtr
		}
		*x = GenEnumType(*v)
	case *string:
		if v == nil {
			return errGenEnumTypeNilPtr
		}
		*x, err = ParseGenEnumType(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x GenEnumType) Value() (driver.Value, error) {
	return x.String(), nil
}
